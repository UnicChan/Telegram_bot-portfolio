import telebot
from telebot import types
from datetime import datetime
import random
from random import randint

from time import sleep

import sqlite3

db = sqlite3.connect('base.db', check_same_thread=False)
sql = db.cursor()

sql.execute('''CREATE TABLE IF NOT EXISTS users (
    id INT,
    username TEXT,
    mess2del INT,
    correct_literas TEXT,
    viselica TEXT,
    alphabet TEXT,
    user_words TEXT,
    mistakes INT,
    mess2del2 INT
)''')

db.commit()

bot = telebot.TeleBot('5694376315:AAEo0IkUJfKpBBhIbTr2zsWZvR94EzUlYds')

who_i_am = '''\
ü´∞–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥, —è *UnicChan*\!
–Ø \- –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Å *3\-—Ö –ª–µ—Ç–Ω–∏–º* —Å—Ç–∞–∂–µ–º\.

üëæ–ó–Ω–∞—é —Ç–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–∞–∫ *Python, C\+\+\.*
–í —Å–≤–æ–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\: `–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQL`*,* `–ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤`*,* `API —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤`*\.*

üßê–ó–Ω–∞—é –æ—Å–Ω–æ–≤—ã *–û–û–ü* –∏ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–∂–æ–º –∫–æ–¥–µ\.

||üôÉ–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å, –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª–µ–µ||
'''

words = ['–ø–∞–Ω–∞–º–∞', '–∏–≥—Ä—É–ª—è', '–æ–±–≤–æ–¥–∫–∞', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–æ—É—Ç–±—É–∫', '—Å—É–ø–µ—Ä–±–æ—Ç', '–ª–æ–ª–∑—Ç–∏–º']

alphabet_liters = ['none', '–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π',
'–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å', '—ç', '—é', '—è']

max_mistakes = 10

winner_photo = 'AgACAgIAAxkBAAO2Y1KzZNwoV8ttDq9mwPjl6vaQkH4AAmm_MRvhDplKCpp4qy-svAgBAAMCAAN5AAMqBA'

viselica_photos = ['AgACAgIAAxkBAAN8Y1JorzZoK4Y1SpxqlZCSTqjowPUAAt2_MRvhDpFKgpn9DXF9ljgBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAN9Y1Jos8ebaj5hu_PQSnvz3iuW5QcAAt6_MRvhDpFK_hnnW_z6SYsBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAN-Y1JouLnAQ6kio-t0hLFGKo_2brIAAt-_MRvhDpFKsGbS0Lv_bGsBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAN_Y1JovLzLJ33-9vfLApEQnps6t68AAuC_MRvhDpFKy5noCY-pl9wBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAOAY1Jov4yee42Sllr_w5J-3-MQ_kYAAuG_MRvhDpFKsN0voJCoNZoBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAOBY1JoxFqqO4xsssefxYk0sU2YQoQAAuK_MRvhDpFKG1D32YMhCbQBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAOCY1JoyMqqL6g6LRD4oH8W5kcxgbYAAuO_MRvhDpFKfvzOwSjeWqkBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAODY1Joy8gWVcuvdzUU5HaKiAOv5BIAAuS_MRvhDpFK4CRxT5oa3mYBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAOEY1JozkiHKKwYiJRFscqtz1qX9wcAAuW_MRvhDpFKOqhdHRsIGZYBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAOFY1Jo0IQcIL_-8HHQy4Impsy6fBwAAua_MRvhDpFKrhGszYWySGYBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAOGY1Jo1HL-vvRwtOz3WP5HMYO2SwgAAue_MRvhDpFKlwlNI3x_1QIBAAMCAAN4AAMqBA']

photos = ['AgACAgIAAxkBAAPWY1K7KeAven_e6dxGh66L6hVnygQAAt3AMRsT_ZlKuyN1YBIB2LYBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAPbY1K7Q12wm9itsh1F1lvx8hPTVrMAAuLAMRsT_ZlKrwSMgxcrGbYBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAPZY1K7OMzKBIb8fE9I9nOYvgSanfUAAuDAMRsT_ZlKt7DILj9MqgQBAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAPYY1K7NFU1cqkQDQUCDu1Pfe4Yi30AAt_AMRsT_ZlKk01K-x1-lxkBAAMCAAN5AAMqBA',
'AgACAgIAAxkBAAPXY1K7LvKcV-2sTdkoQTt2kPqZcJcAAt7AMRsT_ZlKZiYCgnUwP8ABAAMCAAN4AAMqBA',
'AgACAgIAAxkBAAPaY1K7PniGAmENr77bOP2eInhUGHgAAuHAMRsT_ZlKNMYLvDYE3pQBAAMCAAN4AAMqBA']

descriptions = ['üëæ*–ê–Ω–¥—Ä–µ–π.*\n–ü—Ä–æ—Å—Ç–æ –ª—É—á—à–∏–π. `10` –∏–∑ `10`.',
'üëæ*–û–ª–µ–∂–∞.*\n–î–æ–±—Ä—è–∫ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É, `8` –∏–∑ `10`.',
'üëæ*–ü—ë—Ç—Ä.*\n–ù–µ —Å–∞–º—ã–π —É–º–Ω—ã–π, –∑–∞—Ç–æ —Å–∞–º—ã–π –∫—Ä–∞—Å–∏–≤—ã–π. `6` –∏–∑ `10`. ',
'üëæ*–ù–∏–∫–æ–ª–∞–π.*\n–ù–µ–ª—é–¥–∏–º—ã–π, –Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π. `5` –∏–∑ `10`.',
'üëæ*–ñ–µ–Ω—è.*\n–î—É–º–∞–µ—Ç, —á—Ç–æ –æ–Ω –≤–µ–ª–æ—Å–∏–ø–µ–¥. `7` –∏–∑ `10`.',
'üëæ*–ù–∏–∫–æ–¥–∏–º.*\n–ü–æ–ø–∞–ª —Å—é–¥–∞ –ø–æ –¥—Ä—É–∂–±–µ. `1` –∏–∑ `1`.']

def print_time_now():
    time = datetime.now()
    time = time.strftime('%m-%d %H:%M:%S')
    print(f'--{time}--')

def correct_username(message):
    username = ''
    if message.from_user.username == None:
        username += message.from_user.first_name
        if message.from_user.last_name != None:
            username += ' ' + message.from_user.last_name
    else:
        username = '@' + message.from_user.username
    return username

def make_user(message):
    sql.execute(f'SELECT id FROM users WHERE id = {message.from_user.id}')
    if sql.fetchone() is None: #–µ—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç
        sql.execute('INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', (message.from_user.id, correct_username(message), None, '', '', '', '', 0, None))
        db.commit()

        print(f'{correct_username(message)}({message.chat.id}) –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!')
    db.commit()

while True:
    try:
        @bot.message_handler(content_types=["photo"])
        def confirming(message):
            if message.content_type == 'photo':
                photo = max(message.photo, key=lambda x: x.height)
                print(photo.file_id)

        @bot.message_handler(commands=['start'])
        def start(message):
            bot.delete_message(message.chat.id, message.message_id)
            if message.chat.type == 'private':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                menu = types.KeyboardButton('üßê–ü–æ–∫–∞–∂–∏, —á—Ç–æ –º–æ–∂–µ—à—å!')

                markup.add(menu)
                bot.send_message(message.chat.id, who_i_am, parse_mode='MarkdownV2', reply_markup=markup)

                make_user(message)
            else:
                bot.delete_message(message.chat.id, message.message_id)
                bot.send_message(message.chat.id, '–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π üòâ')

        @bot.message_handler(content_types=['text'])
        def bot_message(message):
            if message.chat.type == 'private':
                bot.delete_message(message.chat.id, message.message_id)
                if '–ü–æ–∫–∞–∂–∏' in message.text: 
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    galery = types.KeyboardButton('ü©ª\n–ì–∞–ª–µ—Ä–µ—è')
                    viselica = types.KeyboardButton('üéÆ\n–ò–≥—Ä–∞ "–í–∏—Å–µ–ª–∏—Ü–∞"')
                    me = types.KeyboardButton('‚å®Ô∏è\n–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ')

                    markup.add(galery, viselica, me)
                    bot.send_message(message.chat.id, 'ü©ª*–ì–∞–ª–µ—Ä–µ—è* \- –≥–∞–ª–µ—Ä–µ—è –±–æ—Ç–æ–≤\.\n\nüéÆ*–ò–≥—Ä–∞ "–í–∏—Å–µ–ª–∏—Ü–∞"* \- –æ—Ç–≥–∞–¥–∞–π —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —è —Ç–µ–±–µ –∑–∞–≥–∞–¥–∞—é\! –ó–∞ –∫–∞–∂–¥—É—é –Ω–µ–≤–µ—Ä–Ω–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–Ω—É—é –±—É–∫–≤—É —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –≤—Å—ë –±–ª–∏–∂–µ –∫ –ø—Ä–æ–∏–≥—Ä—ã—à—É\.\n\n‚å®Ô∏è*–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ* \- —Å–≤—è–∑—å —Å–æ –º–Ω–æ–π\.', parse_mode='MarkdownV2', reply_markup=markup)
                
                elif '–í–∏—Å–µ–ª–∏—Ü–∞' in message.text:
                    try:
                        sql.execute(f'SELECT mess2del, mess2del2 FROM users WHERE id = {message.from_user.id}')
                        this = sql.fetchone()
                        mess2del = this[0]
                        mess2del2 = this[1]
                        db.commit()
                        bot.delete_message(message.chat.id, mess2del)
                        bot.delete_message(message.chat.id, mess2del2)
                        sql.execute(f'UPDATE users SET mess2del = ?, mess2del2 = ? WHERE id = {message.from_user.id}', (None, None))
                        db.commit()
                    except:
                        pass

                    sql.execute(f'UPDATE users SET correct_literas = ?, viselica = ?, alphabet = ?, mistakes = ? WHERE id = {message.from_user.id}', ('', words[random.randint(0, len(words)-1)], '', 0))
                    db.commit()

                    sql.execute(f'SELECT * FROM users WHERE id = {message.from_user.id}')
                    user = sql.fetchall()[0]
                    db.commit()

                    photo = viselica_photos[0]

                    markup = types.InlineKeyboardMarkup(row_width=8)
                    a = types.InlineKeyboardButton('–ê', callback_data='1')
                    b = types.InlineKeyboardButton('–ë', callback_data='2')
                    v = types.InlineKeyboardButton('–í', callback_data='3')
                    g = types.InlineKeyboardButton('–ì', callback_data='4')
                    d = types.InlineKeyboardButton('–î', callback_data='5')
                    e = types.InlineKeyboardButton('–ï', callback_data='6')
                    ee = types.InlineKeyboardButton('–Å', callback_data='7')
                    gh = types.InlineKeyboardButton('–ñ', callback_data='8')
                    z = types.InlineKeyboardButton('–ó', callback_data='9')
                    i = types.InlineKeyboardButton('–ò', callback_data='10')
                    ii = types.InlineKeyboardButton('–ô', callback_data='11')
                    k = types.InlineKeyboardButton('–ö', callback_data='12')
                    l = types.InlineKeyboardButton('–õ', callback_data='13')
                    m = types.InlineKeyboardButton('–ú', callback_data='14')
                    n = types.InlineKeyboardButton('–ù', callback_data='15')
                    o = types.InlineKeyboardButton('–û', callback_data='16')
                    p = types.InlineKeyboardButton('–ü', callback_data='17')
                    r = types.InlineKeyboardButton('–†', callback_data='18')
                    s = types.InlineKeyboardButton('–°', callback_data='19')
                    t = types.InlineKeyboardButton('–¢', callback_data='20')
                    y = types.InlineKeyboardButton('–£', callback_data='21')
                    f = types.InlineKeyboardButton('–§', callback_data='22')
                    h = types.InlineKeyboardButton('–•', callback_data='23')
                    c = types.InlineKeyboardButton('–¶', callback_data='24')
                    hh = types.InlineKeyboardButton('–ß', callback_data='25')
                    sh = types.InlineKeyboardButton('–®', callback_data='26')
                    shsh = types.InlineKeyboardButton('–©', callback_data='27')
                    tv = types.InlineKeyboardButton('–™', callback_data='28')
                    iii = types.InlineKeyboardButton('–´', callback_data='29')
                    mg = types.InlineKeyboardButton('–¨', callback_data='30')
                    eee = types.InlineKeyboardButton('–≠', callback_data='31')
                    yy = types.InlineKeyboardButton('–Æ', callback_data='32')
                    aa = types.InlineKeyboardButton('–Ø', callback_data='33')

                    markup.add(a,b,v,g,d,e,ee,gh,z,i,ii,k,l,m,n,o,p,r,s,t,y,f,h,c,hh,sh,shsh,tv,iii,mg,eee,yy,aa)
                    mess2del2 = bot.send_message(message.chat.id, 'üéÆ–í—ã–±–∏—Ä–∞–π –±—É–∫–≤—ã –∏ –ø–æ–ø—ã—Ç–∞–π—Å—è –æ—Ç–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ!')
                    mess2del = bot.send_photo(message.chat.id, photo, 'ü™´–°–ª–æ–≤–æ:  ' + '||\_|| '* len(user[4]), parse_mode='MarkdownV2', reply_markup=markup)

                    sql.execute(f'UPDATE users SET mess2del = ?, mess2del2 = ? WHERE id = {message.from_user.id}', (mess2del.message_id, mess2del2.message_id))
                    db.commit()

                elif '–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ' in message.text:
                    markup = types.InlineKeyboardMarkup()
                    link = types.InlineKeyboardButton('@UnicChan', url='https://t.me/UnicChan')

                    markup.add(link)
                    bot.send_message(message.chat.id, '‚å®Ô∏è', reply_markup=markup)

                elif '–ì–∞–ª–µ—Ä–µ—è' in message.text:
                    try:
                        sql.execute(f'SELECT mess2del, mess2del2 FROM users WHERE id = {message.from_user.id}')
                        this = sql.fetchone()
                        mess2del = this[0]
                        mess2del2 = this[1]
                        db.commit()
                        bot.delete_message(message.chat.id, mess2del)
                        bot.delete_message(message.chat.id, mess2del2)
                        sql.execute(f'UPDATE users SET mess2del = ?, mess2del2 = ? WHERE id = {message.from_user.id}', (None, None))
                        db.commit()
                    except:
                        pass

                    photo = photos[0]
                    description = descriptions[0]
                    all_photos = len(photos) - 1

                    markup = types.InlineKeyboardMarkup(row_width=3)
                    back = types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'forward{all_photos}')
                    close = types.InlineKeyboardButton('‚ùå', callback_data='del')
                    forward = types.InlineKeyboardButton('‚û°Ô∏è', callback_data='forward1')

                    markup.add(back, close, forward)
                    mess2del2 = bot.send_message(message.chat.id, 'üëæ–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–∏–µ –∫—Ä—É—Ç—ã–µ –±–æ—Ç—ã!')
                    mess2del = bot.send_photo(message.chat.id, photo, caption=f'{description}', parse_mode='Markdown', reply_markup=markup)

                    sql.execute(f'UPDATE users SET mess2del = ?, mess2del2 = ? WHERE id = {message.from_user.id}', (mess2del.message_id, mess2del2.message_id))
                    db.commit()

                # else:
                #     sql.execute(f'UPDATE photos SET description = {message.text} WHERE photo = ""')
                #     db.commit()

            else:
                bot.delete_message(message.chat.id, message.message_id)
                bot.send_message(message.chat.id, '–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π üòâ')

        @bot.callback_query_handler(func=lambda call: True) #–æ–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
        def callback_inline(call):
            try:
                if call.message:
                    if call.data == '—á—Ç–æ-—Ç–æ':
                        pass

                    elif call.data == 'del':
                        sql.execute(f'SELECT mess2del, mess2del2 FROM users WHERE id = {call.from_user.id}')
                        this = sql.fetchone()
                        mess2del = this[0]
                        mess2del2 = this[1]
                        db.commit()
                        bot.delete_message(call.message.chat.id, mess2del)
                        bot.delete_message(call.message.chat.id, mess2del2)

                    elif call.data == 'already_used':
                        bot.answer_callback_query(call.id, '‚úñÔ∏è')

                    for num in range(0, 34):
                        if call.data == f'{num}':
                            try:
                                sql.execute(f'SELECT alphabet, viselica, mistakes, correct_literas, mess2del FROM users WHERE id = {call.from_user.id}')
                                this = sql.fetchone()
                                db.commit()
                                alphabet = this[0]
                                viselica = this[1]
                                mistakes = this[2]
                                correct_literas = this[3]
                                mess2del = this[4]
                                litera = alphabet_liters[num]
                                continue_game = True

                                alphabet = alphabet + litera

                                if litera in viselica:
                                    correct_literas = correct_literas + litera
                                    sql.execute(f'UPDATE users SET correct_literas = ?, alphabet = ? WHERE id = {call.from_user.id}', (correct_literas, alphabet))
                                    db.commit()
                                    bot.answer_callback_query(call.id, '‚úÖ')
                                else:
                                    mistakes += 1
                                    sql.execute(f'UPDATE users SET mistakes = ?, alphabet = ? WHERE id = {call.from_user.id}', (mistakes, alphabet))
                                    db.commit()
                                    bot.answer_callback_query(call.id, 'üÖæÔ∏è')

                                    if mistakes >= max_mistakes:
                                        continue_game = False
                                
                                if continue_game:
                                    word = ''
                                    for lit in viselica:
                                        if lit in correct_literas:
                                            word += lit + ' '
                                        else:
                                            word += '||\_|| '
                                    if '_' in word:
                                        photo = viselica_photos[mistakes]

                                        markup = types.InlineKeyboardMarkup(row_width=8)
                                        if '–∞' in alphabet:
                                            a = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            a = types.InlineKeyboardButton('–ê', callback_data='1')
                                        if '–±' in alphabet:
                                            b = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            b = types.InlineKeyboardButton('–ë', callback_data='2')
                                        if '–≤' in alphabet:
                                            v = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            v = types.InlineKeyboardButton('–í', callback_data='3')
                                        if '–≥' in alphabet:
                                            g = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            g = types.InlineKeyboardButton('–ì', callback_data='4')
                                        if '–¥' in alphabet:
                                            d = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            d = types.InlineKeyboardButton('–î', callback_data='5')
                                        if '–µ' in alphabet:
                                            e = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            e = types.InlineKeyboardButton('–ï', callback_data='6')
                                        if '—ë' in alphabet:
                                            ee = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            ee = types.InlineKeyboardButton('–Å', callback_data='7')
                                        if '–∂' in alphabet:
                                            gh = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            gh = types.InlineKeyboardButton('–ñ', callback_data='8')
                                        if '–∑' in alphabet:
                                            z = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            z = types.InlineKeyboardButton('–ó', callback_data='9')
                                        if '–∏' in alphabet:
                                            i = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            i = types.InlineKeyboardButton('–ò', callback_data='10')
                                        if '–π' in alphabet:
                                            ii = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            ii = types.InlineKeyboardButton('–ô', callback_data='11')
                                        if '–∫' in alphabet:
                                            k = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            k = types.InlineKeyboardButton('–ö', callback_data='12')
                                        if '–ª' in alphabet:
                                            l = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            l = types.InlineKeyboardButton('–õ', callback_data='13')
                                        if '–º' in alphabet:
                                            m = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            m = types.InlineKeyboardButton('–ú', callback_data='14')
                                        if '–Ω' in alphabet:
                                            n = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            n = types.InlineKeyboardButton('–ù', callback_data='15')
                                        if '–æ' in alphabet:
                                            o = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            o = types.InlineKeyboardButton('–û', callback_data='16')
                                        if '–ø' in alphabet:
                                            p = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            p = types.InlineKeyboardButton('–ü', callback_data='17')
                                        if '—Ä' in alphabet:
                                            r = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            r = types.InlineKeyboardButton('–†', callback_data='18')
                                        if '—Å' in alphabet:
                                            s = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            s = types.InlineKeyboardButton('–°', callback_data='19')
                                        if '—Ç' in alphabet:
                                            t = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            t = types.InlineKeyboardButton('–¢', callback_data='20')
                                        if '—É' in alphabet:
                                            y = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            y = types.InlineKeyboardButton('–£', callback_data='21')
                                        if '—Ñ' in alphabet:
                                            f = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            f = types.InlineKeyboardButton('–§', callback_data='22')
                                        if '—Ö' in alphabet:
                                            h = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            h = types.InlineKeyboardButton('–•', callback_data='23')
                                        if '—Ü' in alphabet:
                                            c = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            c = types.InlineKeyboardButton('–¶', callback_data='24')
                                        if '—á' in alphabet:
                                            hh = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            hh = types.InlineKeyboardButton('–ß', callback_data='25')
                                        if '—à' in alphabet:
                                            sh = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            sh = types.InlineKeyboardButton('–®', callback_data='26')
                                        if '—â' in alphabet:
                                            shsh = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            shsh = types.InlineKeyboardButton('–©', callback_data='27')
                                        if '—ä' in alphabet:
                                            tv = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            tv = types.InlineKeyboardButton('–™', callback_data='28')
                                        if '—ã' in alphabet:
                                            iii = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            iii = types.InlineKeyboardButton('–´', callback_data='29')
                                        if '—å' in alphabet:
                                            mg = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            mg = types.InlineKeyboardButton('–¨', callback_data='30')
                                        if '—ç' in alphabet:
                                            eee = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            eee = types.InlineKeyboardButton('–≠', callback_data='31')
                                        if '—é' in alphabet:
                                            yy = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            yy = types.InlineKeyboardButton('–Æ', callback_data='32')
                                        if '—è' in alphabet:
                                            aa = types.InlineKeyboardButton('‚úñÔ∏è', callback_data='already_used')
                                        else:
                                            aa = types.InlineKeyboardButton('–Ø', callback_data='33')

                                        markup.add(a,b,v,g,d,e,ee,gh,z,i,ii,k,l,m,n,o,p,r,s,t,y,f,h,c,hh,sh,shsh,tv,iii,mg,eee,yy,aa)
                                        bot.edit_message_media(types.InputMediaPhoto(photo), call.message.chat.id, mess2del)
                                        bot.edit_message_caption(f'ü™´–°–ª–æ–≤–æ: *{word}*', call.message.chat.id, mess2del, parse_mode='MarkdownV2', reply_markup=markup)

                                    else:
                                        try:
                                            sql.execute(f'SELECT mess2del, mess2del2 FROM users WHERE id = {call.from_user.id}')
                                            this = sql.fetchone()
                                            db.commit()
                                            mess2del = this[0]
                                            mess2del2 = this[1]
                                            bot.delete_message(call.message.chat.id, mess2del)
                                            bot.delete_message(call.message.chat.id, mess2del2)
                                        except:
                                            pass

                                        bot.send_photo(call.message.chat.id, winner_photo, f'üîã–°–ª–æ–≤–æ: *{viselica}*\n\nü•≥–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ!\n–ü—Ä–æ–º–æ–∫–æ–¥ *10%* –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: `LIKE`', parse_mode='Markdown')
                                else:
                                    photo = viselica_photos[10]
                                    bot.edit_message_media(types.InputMediaPhoto(photo), call.message.chat.id, mess2del)
                                    bot.edit_message_caption(f'ü™´–°–ª–æ–≤–æ: ||{viselica}||\n\nü•≤–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª\. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑\!', call.message.chat.id, mess2del, parse_mode='MarkdownV2')
                            except:
                                bot.answer_callback_query(call.id, 'ü§Ø–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', show_alert=True)

                        elif call.data == f'forward{num}':
                            bot.answer_callback_query(call.id)
                            all_photos = len(photos) - 1

                            back = num - 1
                            forward = num + 1

                            if num == 0:
                                back = all_photos
                            if num == all_photos:
                                forward = 0

                            photo = photos[num]
                            description = descriptions[num]

                            markup = types.InlineKeyboardMarkup(row_width=3)
                            back = types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data=f'forward{back}')
                            close = types.InlineKeyboardButton('‚ùå', callback_data='del')
                            forward = types.InlineKeyboardButton('‚û°Ô∏è', callback_data=f'forward{forward}')

                            markup.add(back, close, forward)
                            bot.edit_message_media(types.InputMediaPhoto(photo), call.message.chat.id, call.message.message_id, reply_markup=markup)
                            bot.edit_message_caption(f'{description}', call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

            except Exception as e:
                print_time_now()
                print(f'–æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline –∫–Ω–æ–ø–∫–∏!\n{repr(e)}')

        bot.polling(none_stop=True)

    except Exception as e:
        print(e)
        print(print_time_now(), '–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ. –†–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É')
        sleep(1)
